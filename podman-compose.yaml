version: "3.3"

services:
  mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: mstemplate
      MONGO_INITDB_ROOT_PASSWORD: mstemplate123
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - app-tier

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.1
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
      - http.host=0.0.0.0
      - network.host=0.0.0.0
      - transport.host=localhost
      - xpack.security.enabled=true
      - xpack.security.audit.enabled=true
      - xpack.monitoring.collection.enabled=true
      - ELASTIC_PASSWORD=mstemplate123
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - app-tier
    healthcheck:
      interval: 20s
      retries: 10
      test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'

  postgres:
    image: postgres
    environment:
      POSTGRES_USER: mstemplate
      POSTGRES_PASSWORD: mstemplate123
    volumes:
      - postgres_data:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - app-tier

  redis:
    image: "redis"
    command: redis-server --requirepass mstemplate123
    ports:
      - "6379:6379"
    environment:
      - REDIS_REPLICATION_MODE=master
    networks:
      - app-tier

  # #message brokers
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v22.2.2
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --node-id 0
      - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
      - --pandaproxy-addr 0.0.0.0:8082
      - --advertise-pandaproxy-addr localhost:8082
    ports:
      - 8081:8081
      - 8082:8082
      - 9092:9092
      - 9644:9644
      - 29092:29092

  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:29092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: true
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
    ports:
      - 8080:8080
    depends_on:
      - redpanda

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_ERLANG_COOKIE=mqadmin
      - RABBITMQ_DEFAULT_USER=farlley_ferreira
      - RABBITMQ_DEFAULT_PASS=mstemplate123
      - CLUSTERED=true
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-tier

  #log and monitoring

  elasticsearch-apm:
    apm-server:
    image: docker.elastic.co/apm/apm-server:8.9.1
    ports:
      - "8200:8200"
      - "8201:8200"
    environment:
      - apm-server.host=0.0.0.0
      - apm-server.frontend.enabled=true
      - setup.template.settings.index.number_of_shards=1
      - setup.template.settings.index.codec=best_compression
      - output.elasticsearch.hosts=["elasticsearch:9200"]
    command:
      [
        "apm-server",
        "-e",
        "-E",
        "output.elasticsearch.username=elastic",
        "-E",
        "output.elasticsearch.password=mstemplate123",
      ]
    networks:
      - app-tier
    depends_on:
      - elasticsearch

  # #security
  # keycloack: ...

networks:
  app-tier:
    driver: bridge

volumes:
  elasticsearch_data:
    driver: local
  rabbitmq_data:
    driver: local
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local
